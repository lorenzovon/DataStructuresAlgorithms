#include <iostream>
#include <vector>
using namespace std;

uint64_t FnModm(uint64_t n, int m);
uint64_t pisano(uint64_t n, int m);
uint64_t fibonacci(uint64_t n, int m);
void prime(int m);
int main()
{
  uint64_t n;
  int m;
  cin >> n >> m;
  return 0;
}

uint64_t FnModm(uint64_t n, int m)
{
  uint64_t fn = 1, fnMinus1 = 1, fnMinus2 = 0;
  for (uint64_t i = 0; i < n; i++)
  {
    fn = ((fnMinus1 % m) + (fnMinus2 % m)) % m;
    fnMinus2 = fnMinus1;
    fnMinus1 = fn;
  }
  return fn;
}
uint64_t pisano(uint64_t n, int m)
{
  vector<int> modValue;
  vector<int>::iterator i;
  vector<int>::reverse_iterator ir;
  if (m == 1)
  {
    return 1;
  }
  else
  {

    for (uint64_t i = 0; i < n; i++)
    {
      uint64_t modi = fibonacci(i, m);
      modValue.push_back(i);

      if (i > 2 && modValue[i] == 1 && modValue[i - 1] == 0)
      {
        bool found = true;
        for (uint64_t j = i - 1; j <= 2 * i - 3; j++)
        {
          uint64_t nextMod = fibonacci(j, m);
          if (modValue[j - (i - 1)] != nextMod)
          {
            found = false;
            break;
          }
        }
        if (found == true)
        {
          uint64_t period = i - 1;
          cout << n << " " << m << " " << period << endl;
          return period;
        }
      }
    }
  }
}
void primeSet(int m)
{
  // int prime[100000] = [0 1 3 8 6 20 24 16 12 24 60 10 24 28 48 40 24 36 24 18 60 16 30 48 24 100 84 72 48 14 120 30 48 40 36 80 24 76 18 56 60 40 48 88 30 120 48 32 24 112 300 72 84 108 72 20 48 72 42 58 120 60 30 48 96 140 120 136 36 48 240 70 24 148 228 200 18 80 168 78 120 216 120 168 48 180 264 56 60 44 120 112 48 120 96 180 48 196 336 120 300 50 72 208 84 80 108 72 72 108 60 152 48 76 72 240 42 168 174 144 120 110 60 40 30 500 48 256 192 88 420 130 120 144 408 360 36 276 48 46 240 32 210 140 24 140 444 112 228 148 600 50 36 72 240 60 168 316 78 216 240 48 216 328 120 40 168 336 48 364 180 72 264 348 168 400 120 232 132 178 120 90 336 120 48 380 120 180 96 144 180 190 96 388 588 280 336 396 120 22 300 136 150 112 72 40 624 48 168 90 240 42 108 280 72 440 72 240 108 296 60 252 456 448 48 600 228 456 72 114 240 80 84 52 168 160 174 312 144 238 120 240 330 648 60 560 120 252 60 168 1500 250 48 240 768 360 384 516 264 304 420 168 390 176 120 540 144 88 408 268 360 270 72 112 276 100 48 556 138 120 240 56 96 568 210 360 420 80 48 612 420 392 444 588 336 580 228 360 444 336 600 176 150 200 72 60 72 88 240 208 60 310 168 628 948 240 78 636 216 70 480 72 48 36 216 700 984 216 120 32 120 110 168 456 336 680 48 676 1092 152 180 30 72 784 264 240 348 232 168 174 1200 504 240 236 696 140 132 144 534 358 120 342 90 440 336 740 120 736 48 120 1140 432 120 748 180 1000 96 28 144 378 180 256 570 768 192 80 1164 264 588 388 840 144 336 520 396 780 120 796 66 144 600 200 408 420 150 1080 336 380 72 408 120 552 624 464 48 840 336 184 90 418 240 84 42 96 108 900 840 240 72 280 1320 430 72 868 240 280 108 144 888 438 60 336 252 888 456 220 1344 296 96 448 600 40 228 200 456 560 72 916 114 72 240 46 240 928 168 120 156 936 168 272 480 632 348 440 312 900 144 216 714 478 240 532 240 48 330 980 648 976 60 328 1680 490 120 252 252 120 120 560 168 498 1500 336];
  // string s = 0 1 3 8 6 20 24 16 12 24 60 10 24 28 48 40 24 36 24 18 60 16 30 48 24 100 84 72 48 14 120 30 48 40 36 80 24 76 18 56 60 40 48 88 30 120 48 32 24 112 300 72 84 108 72 20 48 72 42 58 120 60 30 48 96 140 120 136 36 48 240 70 24 148 228 200 18 80 168 78 120 216 120 168 48 180 264 56 60 44 120 112 48 120 96 180 48 196 336 120 300 50 72 208 84 80 108 72 72 108 60 152 48 76 72 240 42 168 174 144 120 110 60 40 30 500 48 256 192 88 420 130 120 144 408 360 36 276 48 46 240 32 210 140 24 140 444 112 228 148 600 50 36 72 240 60 168 316 78 216 240 48 216 328 120 40 168 336 48 364 180 72 264 348 168 400 120 232 132 178 120 90 336 120 48 380 120 180 96 144 180 190 96 388 588 280 336 396 120 22 300 136 150 112 72 40 624 48 168 90 240 42 108 280 72 440 72 240 108 296 60 252 456 448 48 600 228 456 72 114 240 80 84 52 168 160 174 312 144 238 120 240 330 648 60 560 120 252 60 168 1500 250 48 240 768 360 384 516 264 304 420 168 390 176 120 540 144 88 408 268 360 270 72 112 276 100 48 556 138 120 240 56 96 568 210 360 420 80 48 612 420 392 444 588 336 580 228 360 444 336 600 176 150 200 72 60 72 88 240 208 60 310 168 628 948 240 78 636 216 70 480 72 48 36 216 700 984 216 120 32 120 110 168 456 336 680 48 676 1092 152 180 30 72 784 264 240 348 232 168 174 1200 504 240 236 696 140 132 144 534 358 120 342 90 440 336 740 120 736 48 120 1140 432 120 748 180 1000 96 28 144 378 180 256 570 768 192 80 1164 264 588 388 840 144 336 520 396 780 120 796 66 144 600 200 408 420 150 1080 336 380 72 408 120 552 624 464 48 840 336 184 90 418 240 84 42 96 108 900 840 240 72 280 1320 430 72 868 240 280 108 144 888 438 60 336 252 888 456 220 1344 296 96 448 600 40 228 200 456 560 72 916 114 72 240 46 240 928 168 120 156 936 168 272 480 632 348 440 312 900 144 216 714 478 240 532 240 48 330 980 648 976 60 328 1680 490 120 252 252 120 120 560 168 498 1500 336;
}
uint64_t fibonacci(uint64_t n, int m)
{
  uint64_t period = pisano(n, m);
  return FnModm(n % period, m);
}